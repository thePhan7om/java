* Prototype

- Cloning an object by reducing the cost of creation

* Where
	- When there are many subclasses that differ only in the kind of objects
	- A system needs independant of how its objects are created composed and represented
	- dynamic binding or loading of a method
	- use one instance to finish job by changing state
	- add remove new objects at runtime
	
	
	- Method overloading is kind of prototyping 
	
interface shape{

public void draw();
}

class Line implements Shape{
	public void draw(){
	//draw
	}
}

class Square implements Shape{
	public void draw(){
	//draw
	}
}
class Circle implements Shape{
	public void draw(){
	//draw
	}
}

class Painting {
 //main
 	Shape s1 = new Line();
 	Shape s2 = new Square();
 	Shape s3 - new Circle();
 	
 	paint(s1);
 	paint(s2);
 	paint(s3);
 
 static void paint(Shape s)
 {
 s.draw()
 }
 
 
 - can also use instance off
 - can also create a shallow copy
 
 }
 